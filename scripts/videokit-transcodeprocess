#!/bin/bash
#
# VideoKit-KDE - A set of video utilities for KDE, extending Dolphin.
#       - VideoKit-KDE-TranscodeProcess
#
# Author:  Tom Brown (https://github.com/TomB16)
# License: MIT License
# Contact: tom@CarlsonSpeed.com
#
# Copyright (c) 2025 Tom Brown
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


# transcode queue params

echo $( basename "$0" )

DIRECTORY=$( videokit-config TRANSCODE DIRECTORY );	DIRECTORY="${DIRECTORY//\~/$HOME}";	DIRECTORY="${DIRECTORY%\"}";	DIRECTORY="${DIRECTORY#\"}"
QUEUE=$(     videokit-config TRANSCODE QUEUE );		QUEUE="${QUEUE%\"}";			QUEUE="${QUEUE#\"}";		QUEUE=$DIRECTORY"/"$QUEUE;
LOG=$(       videokit-config TRANSCODE LOG );		LOG="${LOG%\"}";			LOG="${LOG#\"}";		LOG=$DIRECTORY"/"$LOG;
MAX_EMPTY=$( videokit-config TRANSCODE MAX_EMPTY )

LOCK=$(      videokit-config TRANSCODE LOCK );		LOCK="${LOCK%\"}";			LOCK="${LOCK#\"}";		LOCK=$XDG_RUNTIME_DIR"/"$LOCK;

DEBUG=$(     videokit-config TRANSCODE DEBUG );


if [ "$DEBUG" ]; then

	echo "Debug:  Directory   =" $DIRECTORY
	echo "Debug:  Queue       =" $QUEUE
	echo "Debug:  Lock        =" $LOCK
	echo "Debug:  Log         =" $LOG

fi


# create the transcode path, as necessary

if [[ -z "$DIRECTORY" ]]; then mkdir -p "$DIRECTORY" ; fi


# check for other running transcodes

eval "exec 200>\"$LOCK\""
if flock -n 200 ; then
	if [ "$DEBUG" ]; then	echo "Debug:  Process lock aquired";	fi
else
	echo "VideoKit-KDE-TranscodeProcess is already running." 
	exit 1 
fi


# processing loop

SLEEP=0
EMPTY=0
while [ "$EMPTY" -lt "$MAX_EMPTY" ]
do
	# pull transcode request from queue

	VID_FILENAME=$( videokit-transcodequeue look )
	VID_FILENAME="${VID_FILENAME%"${VID_FILENAME##*[![:space:]]}"}"


	# process queue entry

	if [[ -f "$VID_FILENAME" ]] ; then

		SLEEP=0
		EMPTY=0
		VID_FRAMES=$(    mediainfo --Inform="Video;%FrameCount%" "$VID_FILENAME" | awk 'NF' )
		VID_DURATION=$(  mediainfo --Inform="General;%Duration%" "$VID_FILENAME" | awk '{ms=$1; hours=int(ms/3600000); ms%=3600000; minutes=int(ms/60000); ms%=60000; seconds=int(ms/1000); printf("%02d:%02d:%02d\n", hours, minutes, seconds)}' )
		TIME_START=$(    date '+%Y%m%d %H%M%S' )
		SECONDS_START=$( date '+%s' )


		# fetch the number of lines in the file

	        VID_LINES=$( mediainfo --Inform="Video;%Height%" "$VID_FILENAME" )
		if [ "$DEBUG" ]; then	echo "Debug:  Lines      = $VID_LINES";		fi


		# transcode

		if [ "$DEBUG" ]; then	echo "Debug:  Queue entry= $VID_FILENAME";	fi
		videokit-transcodefile "$VID_FILENAME"


		# format the result

		RESULT=$?

		TIME_END=$(date '+%Y%m%d %H%M%S')
		SECONDS_END=$(    date '+%s')
		(( TIME_ELAPSED = SECONDS_END - SECONDS_START ))
		ELAPSED=$( VideoKit-KDE-S2HMS "$TIME_ELAPSED" )

		TRANS_FPS=$(awk "BEGIN { printf \"%.2f\", $VID_FRAMES / $TIME_ELAPSED }")
		MESSAGE="Transcode Start: $TIME_START  End: $TIME_END  Transcode time: $ELAPSED  Duration: $VID_DURATION  Lines: $VID_LINES  fps: $TRANS_FPS  File: $VID_FILENAME"


		# log and post notification to kde message center

		if [ $RESULT -eq 0 ]; then STATUS="[OK]";	else STATUS="[FAIL]";	fi
                MESSAGE="$STATUS $MESSAGE"
	        echo $MESSAGE >> $LOG

		notify-send -a TranscodeProcessor -h "string:desktop-entry:org.kde.konsole" "Transcode Queue Processor" "$MESSAGE"

	else

		TMP=$((EMPTY++))
		if [ "$DEBUG" ]; then	                  echo "Debug:  Empty = $EMPTY";  fi


	fi


	# permanently remove the processed item from queue

	/usr/bin/VideoKit/VideoKit-KDE-TranscodeQueue pull


	# loop forever but sleep while queue empty

	if [[ "$EMPTY" -gt 0 ]]; then
		if [ "$SLEEP" -eq "0" ] ; then 	SLEEP=1;  echo "Info:  Queue empty.";		  fi
		if [ "$DEBUG" ]; then	                  echo "Debug:  Queue empty.  Sleeping";  fi
		sleep 10
	fi

done


# remove lock file on the way out

if [    "$DEBUG" ];	then echo "Debug:  Process lock withdrawn";	fi
if [ -f "$LOCK"  ];	then rm "$LOCK";  				fi
if [ -f "$QUEUE" ];	then rm "$QUEUE";  				fi

