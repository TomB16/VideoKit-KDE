#!/bin/bash
#
# VideoKit-KDE - A set of video utilities for KDE, extending Dolphin.
#       - videokit-transcodefile
#
# Author:  Tom Brown (https://github.com/TomB16)
# License: MIT License
# Contact: tom@CarlsonSpeed.com
#
# Copyright (c) 2025 Tom Brown
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.



# transcode queue params

#echo $( basename "$0" )

DIRECTORY=$(     videokit-config TRANSCODE DIRECTORY );		DIRECTORY="${DIRECTORY//\~/$HOME}";     DIRECTORY="${DIRECTORY%\"}";    	DIRECTORY="${DIRECTORY#\"}"
FFMPEG_RTBUF=$(  videokit-config TRANSCODE FFMPEG_RTBUF );
FFMPEG_PARAMS=$( videokit-config TRANSCODE FFMPEG_PARAMS );						FFMPEG_PARAMS="${FFMPEG_PARAMS%\'}";    FFMPEG_PARAMS="${FFMPEG_PARAMS#\'}"
DEBUG=$(         videokit-config TRANSCODE DEBUG );


# get source file and strip trailing spaces

SOURCE=$1
SOURCE="${SOURCE%"${SOURCE##*[![:space:]]}"}"


if [ -f "$SOURCE" ]; then

	# fetch the number of lines in the file

	LINES=$( mediainfo --Inform="Video;%Height%" "$SOURCE" )


	# quality ladder

	if   [ "$LINES" -le $( videokit-config QUALITY STANDARD )  ]; then QUALITY="STANDARD" ;
	elif [ "$LINES" -le $( videokit-config QUALITY 720P     )  ]; then QUALITY="720P" ;
	elif [ "$LINES" -le $( videokit-config QUALITY 1080P    )  ]; then QUALITY="1080P" ;
	elif [ "$LINES" -le $( videokit-config QUALITY 2160P    )  ]; then QUALITY="2160P" ;
	else  					                 	   QUALITY="MAX" ;
	fi

	if "$DEBUG"; then     echo "Debug:  Quality       = $QUALITY";        fi
	if "$DEBUG"; then     echo "Debug:  ffmpeg params = $FFMPEG_PARAMS";  fi


	# ffmpeg parameters

	TRANS_QUALITY=$( videokit-config TRANSCODE $QUALITY"_QUALITY" )
	TRANS_THREADS=$( videokit-config TRANSCODE $QUALITY"_THREADS" )
	TRANS_PRESET=$(  videokit-config TRANSCODE $QUALITY"_PRESET"  )

	# create target file

	FILENAME=$(basename "$SOURCE")
	FILE="${FILENAME%.*}"
	EXTENSION="${FILENAME##*.}"

	DESTINATION=$DIRECTORY"/"$FILE" (preset "$TRANS_PRESET" Q$TRANS_QUALITY)."$EXTENSION


	# process the file

	systemd-inhibit --why="Encoding video" nice -n 19 ffmpeg -y -rtbufsize $FFMPEG_RTBUF -i "$SOURCE" $FFMPEG_PARAMS -crf $TRANS_QUALITY -preset $TRANS_PRESET -c:a copy "$DESTINATION"

fi

